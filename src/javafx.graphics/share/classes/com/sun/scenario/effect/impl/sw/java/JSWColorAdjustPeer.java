/*
 * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file was generated by JSLC -- DO NOT EDIT MANUALLY!
 */

package com.sun.scenario.effect.impl.sw.java;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import com.sun.scenario.effect.Effect;
import com.sun.scenario.effect.FilterContext;
import com.sun.scenario.effect.FloatMap;
import com.sun.scenario.effect.ImageData;
import com.sun.scenario.effect.ColorAdjust;
import com.sun.scenario.effect.impl.BufferUtil;
import com.sun.scenario.effect.impl.HeapImage;
import com.sun.scenario.effect.impl.Renderer;
import com.sun.scenario.effect.impl.state.*;
import com.sun.javafx.geom.Rectangle;
import com.sun.javafx.geom.transform.BaseTransform;

public class JSWColorAdjustPeer extends JSWEffectPeer  {

    public JSWColorAdjustPeer(FilterContext fctx, Renderer r, String uniqueName) {
        super(fctx, r, uniqueName);
    }

    @Override
    protected final ColorAdjust getEffect() {
        return (ColorAdjust)super.getEffect();
    }


    private float getHue() {
        return getEffect().getHue() / 2f;
    }

    private float getSaturation() {
        return getEffect().getSaturation() + 1f;
    }

    private float getBrightness() {
        return getEffect().getBrightness() + 1f;
    }

    private float getContrast() {
        float c = getEffect().getContrast();
        if (c > 0) c *= 3f;
        return (c + 1f);
    }


    @Override
    public ImageData filter(Effect effect,
                            RenderState rstate,
                            BaseTransform transform,
                            Rectangle outputClip,
                            ImageData... inputs)
    {
        setEffect(effect);
        Rectangle dstBounds = getResultBounds(transform, outputClip, inputs);
        setDestBounds(dstBounds);

        // TODO: for now, all input images must be TYPE_INT_ARGB_PRE
        HeapImage src0 = (HeapImage)inputs[0].getTransformedImage(dstBounds);
        int src0x = 0;
        int src0y = 0;
        int src0w = src0.getPhysicalWidth();
        int src0h = src0.getPhysicalHeight();
        int src0scan = src0.getScanlineStride();
        int[] baseImg =
            src0.getPixelArray();
        Rectangle src0Bounds = new Rectangle(src0x, src0y, src0w, src0h);
        Rectangle src0InputBounds = inputs[0].getTransformedBounds(dstBounds);
        BaseTransform src0Transform = BaseTransform.IDENTITY_TRANSFORM;
        setInputBounds(0, src0InputBounds);
        setInputNativeBounds(0, src0Bounds);


        float[] src0Rect = new float[4];
        getTextureCoordinates(0, src0Rect,
                              src0InputBounds.x, src0InputBounds.y,
                              src0w, src0h,
                              dstBounds, src0Transform);


        final int dstx = 0;
        final int dsty = 0;
        final int dstw = dstBounds.width;
        final int dsth = dstBounds.height;

        HeapImage dst = (HeapImage)getRenderer().getCompatibleImage(dstw, dsth);
        setDestNativeBounds(dst.getPhysicalWidth(), dst.getPhysicalHeight());
        int dstscan = dst.getScanlineStride();
        int[] dstPixels = dst.getPixelArray();

        int dyi;
        float color_x, color_y, color_z, color_w;

        float saturation = getSaturation();
        float brightness = getBrightness();
        float contrast = getContrast();
        float hue = getHue();


        float inc0_x = (src0Rect[2] - src0Rect[0]) / dstw;
        float inc0_y = (src0Rect[3] - src0Rect[1]) / dsth;


        float pos0_y = src0Rect[1] + inc0_y*0.5f;

        for (int dy = dsty; dy < dsty+dsth; dy++) {
            float pixcoord_y = (float)dy;

            dyi = dy*dstscan;

            float pos0_x = src0Rect[0] + inc0_x*0.5f;

            for (int dx = dstx; dx < dstx+dstw; dx++) {
                float pixcoord_x = (float)dx;


                {
                float sample_res_x, sample_res_y, sample_res_z, sample_res_w;
                {
                float loc_tmp_x = pos0_x;
                float loc_tmp_y = pos0_y;
                int baseImg_tmp;
                if (loc_tmp_x >= 0 && loc_tmp_y >= 0) {
                    int iloc_tmp_x = (int)(loc_tmp_x*src0w);
                    int iloc_tmp_y = (int)(loc_tmp_y*src0h);
                    boolean out =
                        iloc_tmp_x >= src0w ||
                        iloc_tmp_y >= src0h;
                    baseImg_tmp = out ? 0 :
                        baseImg[iloc_tmp_y*src0scan + iloc_tmp_x];
                } else {
                    baseImg_tmp = 0;
                }
                sample_res_x = (((baseImg_tmp >>  16) & 0xff) / 255f);
                sample_res_y = (((baseImg_tmp >>   8) & 0xff) / 255f);
                sample_res_z = (((baseImg_tmp       ) & 0xff) / 255f);
                sample_res_w = (((baseImg_tmp >>> 24)       ) / 255f);

                }
                float src_x = sample_res_x;
                float src_y = sample_res_y;
                float src_z = sample_res_z;
                float src_w = sample_res_w;
                if (src_w > 0.0f){
                src_x /= src_w;
                src_y /= src_w;
                src_z /= src_w;
                }
                src_x = ((src_x - 0.5f) * contrast) + 0.5f;
                src_y = ((src_y - 0.5f) * contrast) + 0.5f;
                src_z = ((src_z - 0.5f) * contrast) + 0.5f;
                float rgb_to_hsb_res_x, rgb_to_hsb_res_y, rgb_to_hsb_res_z;
                {
                float v_tmp_x = src_x;
                float v_tmp_y = src_y;
                float v_tmp_z = src_z;
                {
                float h;
                float s;
                float b;
                float max_res;
                {
                float x_tmp = v_tmp_x;
                float y_tmp = v_tmp_y;
                max_res = (x_tmp > y_tmp) ? x_tmp : y_tmp;

                }
                float cmax = max_res;
                {
                float x_tmp = cmax;
                float y_tmp = v_tmp_z;
                max_res = (x_tmp > y_tmp) ? x_tmp : y_tmp;

                }
                cmax = max_res;
                float min_res;
                {
                float x_tmp = v_tmp_x;
                float y_tmp = v_tmp_y;
                min_res = (x_tmp < y_tmp) ? x_tmp : y_tmp;

                }
                float cmin = min_res;
                {
                float x_tmp = cmin;
                float y_tmp = v_tmp_z;
                min_res = (x_tmp < y_tmp) ? x_tmp : y_tmp;

                }
                cmin = min_res;
                if (cmax > cmin){
                float c_x = (cmax - v_tmp_x) / (cmax - cmin);
                float c_y = (cmax - v_tmp_y) / (cmax - cmin);
                float c_z = (cmax - v_tmp_z) / (cmax - cmin);
                if (v_tmp_x == cmax){
                h = c_z - c_y;
                }
                 else if (v_tmp_y == cmax){
                h = 2.0f + c_x - c_z;
                }
                 else {
                h = 4.0f + c_y - c_x;
                }
                h /= 6.0f;
                if (h < 0.0f){
                h += 1.0f;
                }
                s = (cmax - cmin) / cmax;
                }
                 else {
                h = 0.0f;
                s = 0.0f;
                }
                b = cmax;
                rgb_to_hsb_res_x = h;
                rgb_to_hsb_res_y = s;
                rgb_to_hsb_res_z = b;
                }

                }
                float hsb_x = rgb_to_hsb_res_x;
                float hsb_y = rgb_to_hsb_res_y;
                float hsb_z = rgb_to_hsb_res_z;
                hsb_x += hue;
                if (hsb_x < 0.0f){
                hsb_x += 1.0f;
                }
                 else if (hsb_x > 1.0f){
                hsb_x -= 1.0f;
                }
                if (saturation > 1.0f){
                float sat = saturation - 1.0f;
                hsb_y += (1.0f - hsb_y) * sat;
                }
                 else {
                hsb_y *= saturation;
                }
                if (brightness > 1.0f){
                float brt = brightness - 1.0f;
                hsb_y *= 1.0f - brt;
                hsb_z += (1.0f - hsb_z) * brt;
                }
                 else {
                hsb_z *= brightness;
                }
                float clamp_res_x, clamp_res_y;
                {
                float val_tmp_x = hsb_y;
                float val_tmp_y = hsb_z;
                float min_tmp = 0.0f;
                float max_tmp = 1.0f;
                clamp_res_x = (val_tmp_x < min_tmp) ? min_tmp : 
                (val_tmp_x > max_tmp) ? max_tmp : val_tmp_x;
                clamp_res_y = (val_tmp_y < min_tmp) ? min_tmp : 
                (val_tmp_y > max_tmp) ? max_tmp : val_tmp_y;

                }
                hsb_y = clamp_res_x;
                hsb_z = clamp_res_y;
                float hsb_to_rgb_res_x, hsb_to_rgb_res_y, hsb_to_rgb_res_z;
                {
                float v_tmp_x = hsb_x;
                float v_tmp_y = hsb_y;
                float v_tmp_z = hsb_z;
                {
                float res_x = 0.0f;
                float res_y = 0.0f;
                float res_z = 0.0f;
                float h = v_tmp_x;
                float s = v_tmp_y;
                float b = v_tmp_z;
                float floor_res;
                {
                float x_tmp = h;
                floor_res = (float)Math.floor(x_tmp);

                }
                h = (h - floor_res) * 6.0f;
                {
                float x_tmp = h;
                floor_res = (float)Math.floor(x_tmp);

                }
                float f = h - floor_res;
                float p = b * (1.0f - s);
                float q = b * (1.0f - (s * f));
                float t = b * (1.0f - (s * (1.0f - f)));
                {
                float x_tmp = h;
                floor_res = (float)Math.floor(x_tmp);

                }
                h = floor_res;
                if (h < 1.0f){
                res_x = b;
                res_y = t;
                res_z = p;
                }
                 else if (h < 2.0f){
                res_x = q;
                res_y = b;
                res_z = p;
                }
                 else if (h < 3.0f){
                res_x = p;
                res_y = b;
                res_z = t;
                }
                 else if (h < 4.0f){
                res_x = p;
                res_y = q;
                res_z = b;
                }
                 else if (h < 5.0f){
                res_x = t;
                res_y = p;
                res_z = b;
                }
                 else {
                res_x = b;
                res_y = p;
                res_z = q;
                }
                hsb_to_rgb_res_x = res_x;
                hsb_to_rgb_res_y = res_y;
                hsb_to_rgb_res_z = res_z;
                }

                }
                color_x = src_w * hsb_to_rgb_res_x;
                color_y = src_w * hsb_to_rgb_res_y;
                color_z = src_w * hsb_to_rgb_res_z;
                color_w = src_w;
                }


                if (color_w < 0f) color_w = 0f; else if (color_w > 1f) color_w = 1f;
                if (color_x < 0f) color_x = 0f; else if (color_x > color_w) color_x = color_w;
                if (color_y < 0f) color_y = 0f; else if (color_y > color_w) color_y = color_w;
                if (color_z < 0f) color_z = 0f; else if (color_z > color_w) color_z = color_w;
                dstPixels[dyi+dx] =
                    ((int)(color_x * 0xff) << 16) |
                    ((int)(color_y * 0xff) <<  8) |
                    ((int)(color_z * 0xff) <<  0) |
                    ((int)(color_w * 0xff) << 24);

                pos0_x += inc0_x;

            }

            pos0_y += inc0_y;

        }

        inputs[0].releaseTransformedImage(src0);


        return new ImageData(getFilterContext(), dst, dstBounds);
    }
}
