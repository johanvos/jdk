/*
 * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file was generated by JSLC -- DO NOT EDIT MANUALLY!
 */

package com.sun.scenario.effect.impl.prism.ps;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.HashMap;
import com.sun.prism.ps.Shader;
import com.sun.scenario.effect.PerspectiveTransform;
import com.sun.scenario.effect.Effect;
import com.sun.scenario.effect.FilterContext;
import com.sun.scenario.effect.impl.BufferUtil;
import com.sun.scenario.effect.impl.Renderer;
import com.sun.scenario.effect.impl.state.*;
import com.sun.javafx.geom.Rectangle;

public class PPSPerspectiveTransformPeer extends PPSOneSamplerPeer  {

    public PPSPerspectiveTransformPeer(FilterContext fctx, Renderer r, String shaderName) {
        super(fctx, r, shaderName);
    }

    @Override
    protected final PerspectiveTransform getEffect() {
        return (PerspectiveTransform)super.getEffect();
    }


    private float[][] getITX() {
        PerspectiveTransformState state = (PerspectiveTransformState)
            AccessHelper.getState(getEffect());
        return state.getITX();
    }

    private float[] getTx0() {
        Rectangle ib = getInputBounds(0);
        Rectangle nb = getInputNativeBounds(0);
        float scalex = (float) ib.width / (float) nb.width;
        float itx0[] = getITX()[0];
        return new float[] { itx0[0] * scalex, itx0[1] * scalex, itx0[2] * scalex };
    }
    private float[] getTx1() {
        Rectangle ib = getInputBounds(0);
        Rectangle nb = getInputNativeBounds(0);
        float scaley = (float) ib.height / (float) nb.height;
        float itx1[] = getITX()[1];
        return new float[] { itx1[0] * scaley, itx1[1] * scaley, itx1[2] * scaley };
    }
    private float[] getTx2() {
        return getITX()[2];
    }

    @Override
    public int getTextureCoordinates(int inputIndex, float coords[],
                                     float srcX, float srcY,
                                     float srcNativeWidth,
                                     float srcNativeHeight,
                                     Rectangle dstBounds,
                                     com.sun.javafx.geom.transform.BaseTransform transform)
    {
        coords[0] = dstBounds.x;
        coords[1] = dstBounds.y;
        coords[2] = dstBounds.x + dstBounds.width;
        coords[3] = dstBounds.y + dstBounds.height;
        return 4;
    }


    @Override
    protected boolean isSamplerLinear(int i) {
        switch (i) {
        case 0:
            return true;

        default:
            return false;
        }
    }

    @Override
    protected Shader createShader() {
        HashMap<String, Integer> samplers = new HashMap<String, Integer>();
        samplers.put("baseImg", 0);

        HashMap<String, Integer> params = new HashMap<String, Integer>();
        params.put("tx1", 1);
        params.put("tx0", 0);
        params.put("tx2", 2);

        return getRenderer().createShader(getShaderName(), samplers, params,
                                          false);
    }

    @Override
    protected void updateShader(Shader shader) {
        float[] tx1_tmp = getTx1();
        shader.setConstant("tx1", tx1_tmp[0], tx1_tmp[1], tx1_tmp[2]);
        float[] tx0_tmp = getTx0();
        shader.setConstant("tx0", tx0_tmp[0], tx0_tmp[1], tx0_tmp[2]);
        float[] tx2_tmp = getTx2();
        shader.setConstant("tx2", tx2_tmp[0], tx2_tmp[1], tx2_tmp[2]);

    }
}
