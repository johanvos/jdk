/*
 * Copyright (c) 2008, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file was generated by JSLC -- DO NOT EDIT MANUALLY!
 */

package com.sun.scenario.effect.impl.sw.java;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import com.sun.scenario.effect.Effect;
import com.sun.scenario.effect.FilterContext;
import com.sun.scenario.effect.FloatMap;
import com.sun.scenario.effect.ImageData;
import com.sun.scenario.effect.SepiaTone;
import com.sun.scenario.effect.impl.BufferUtil;
import com.sun.scenario.effect.impl.HeapImage;
import com.sun.scenario.effect.impl.Renderer;
import com.sun.scenario.effect.impl.state.*;
import com.sun.javafx.geom.Rectangle;
import com.sun.javafx.geom.transform.BaseTransform;

public class JSWSepiaTonePeer extends JSWEffectPeer  {

    public JSWSepiaTonePeer(FilterContext fctx, Renderer r, String uniqueName) {
        super(fctx, r, uniqueName);
    }

    @Override
    protected final SepiaTone getEffect() {
        return (SepiaTone)super.getEffect();
    }


    private float getLevel() {
        return getEffect().getLevel();
    }


    @Override
    public ImageData filter(Effect effect,
                            RenderState rstate,
                            BaseTransform transform,
                            Rectangle outputClip,
                            ImageData... inputs)
    {
        setEffect(effect);
        Rectangle dstBounds = getResultBounds(transform, outputClip, inputs);
        setDestBounds(dstBounds);

        // TODO: for now, all input images must be TYPE_INT_ARGB_PRE
        HeapImage src0 = (HeapImage)inputs[0].getTransformedImage(dstBounds);
        int src0x = 0;
        int src0y = 0;
        int src0w = src0.getPhysicalWidth();
        int src0h = src0.getPhysicalHeight();
        int src0scan = src0.getScanlineStride();
        int[] baseImg =
            src0.getPixelArray();
        Rectangle src0Bounds = new Rectangle(src0x, src0y, src0w, src0h);
        Rectangle src0InputBounds = inputs[0].getTransformedBounds(dstBounds);
        BaseTransform src0Transform = BaseTransform.IDENTITY_TRANSFORM;
        setInputBounds(0, src0InputBounds);
        setInputNativeBounds(0, src0Bounds);


        float[] src0Rect = new float[4];
        getTextureCoordinates(0, src0Rect,
                              src0InputBounds.x, src0InputBounds.y,
                              src0w, src0h,
                              dstBounds, src0Transform);


        final int dstx = 0;
        final int dsty = 0;
        final int dstw = dstBounds.width;
        final int dsth = dstBounds.height;

        HeapImage dst = (HeapImage)getRenderer().getCompatibleImage(dstw, dsth);
        setDestNativeBounds(dst.getPhysicalWidth(), dst.getPhysicalHeight());
        int dstscan = dst.getScanlineStride();
        int[] dstPixels = dst.getPixelArray();

        int dyi;
        float color_x, color_y, color_z, color_w;

        float level = getLevel();


        float inc0_x = (src0Rect[2] - src0Rect[0]) / dstw;
        float inc0_y = (src0Rect[3] - src0Rect[1]) / dsth;


        float pos0_y = src0Rect[1] + inc0_y*0.5f;

        for (int dy = dsty; dy < dsty+dsth; dy++) {
            float pixcoord_y = (float)dy;

            dyi = dy*dstscan;

            float pos0_x = src0Rect[0] + inc0_x*0.5f;

            for (int dx = dstx; dx < dstx+dstw; dx++) {
                float pixcoord_x = (float)dx;


                {
                float weightBW_x = 0.3f;
                float weightBW_y = 0.59f;
                float weightBW_z = 0.11f;
                float weightSep_x = 1.6f;
                float weightSep_y = 1.2f;
                float weightSep_z = 0.9f;
                float sample_res_x, sample_res_y, sample_res_z, sample_res_w;
                {
                float loc_tmp_x = pos0_x;
                float loc_tmp_y = pos0_y;
                int baseImg_tmp;
                if (loc_tmp_x >= 0 && loc_tmp_y >= 0) {
                    int iloc_tmp_x = (int)(loc_tmp_x*src0w);
                    int iloc_tmp_y = (int)(loc_tmp_y*src0h);
                    boolean out =
                        iloc_tmp_x >= src0w ||
                        iloc_tmp_y >= src0h;
                    baseImg_tmp = out ? 0 :
                        baseImg[iloc_tmp_y*src0scan + iloc_tmp_x];
                } else {
                    baseImg_tmp = 0;
                }
                sample_res_x = (((baseImg_tmp >>  16) & 0xff) / 255f);
                sample_res_y = (((baseImg_tmp >>   8) & 0xff) / 255f);
                sample_res_z = (((baseImg_tmp       ) & 0xff) / 255f);
                sample_res_w = (((baseImg_tmp >>> 24)       ) / 255f);

                }
                float srcClr_x = sample_res_x;
                float srcClr_y = sample_res_y;
                float srcClr_z = sample_res_z;
                float srcClr_w = sample_res_w;
                float dot_res;
                {
                float x_tmp_x = srcClr_x;
                float x_tmp_y = srcClr_y;
                float x_tmp_z = srcClr_z;
                float y_tmp_x = weightBW_x;
                float y_tmp_y = weightBW_y;
                float y_tmp_z = weightBW_z;
                dot_res = (x_tmp_x * y_tmp_x)+
                (x_tmp_y * y_tmp_y)+
                (x_tmp_z * y_tmp_z);

                }
                float l = dot_res;
                float lum_x = l;
                float lum_y = l;
                float lum_z = l;
                float sep_x = lum_x * weightSep_x;
                float sep_y = lum_y * weightSep_y;
                float sep_z = lum_z * weightSep_z;
                float mix_res_x, mix_res_y, mix_res_z;
                {
                float x_tmp_x = sep_x;
                float x_tmp_y = sep_y;
                float x_tmp_z = sep_z;
                float y_tmp_x = srcClr_x;
                float y_tmp_y = srcClr_y;
                float y_tmp_z = srcClr_z;
                float a_tmp = 1.0f - level;
                mix_res_x = (x_tmp_x * (1.0f - a_tmp) + y_tmp_x * a_tmp);
                mix_res_y = (x_tmp_y * (1.0f - a_tmp) + y_tmp_y * a_tmp);
                mix_res_z = (x_tmp_z * (1.0f - a_tmp) + y_tmp_z * a_tmp);

                }
                color_x = mix_res_x;
                color_y = mix_res_y;
                color_z = mix_res_z;
                color_w = srcClr_w;
                }


                if (color_w < 0f) color_w = 0f; else if (color_w > 1f) color_w = 1f;
                if (color_x < 0f) color_x = 0f; else if (color_x > color_w) color_x = color_w;
                if (color_y < 0f) color_y = 0f; else if (color_y > color_w) color_y = color_w;
                if (color_z < 0f) color_z = 0f; else if (color_z > color_w) color_z = color_w;
                dstPixels[dyi+dx] =
                    ((int)(color_x * 0xff) << 16) |
                    ((int)(color_y * 0xff) <<  8) |
                    ((int)(color_z * 0xff) <<  0) |
                    ((int)(color_w * 0xff) << 24);

                pos0_x += inc0_x;

            }

            pos0_y += inc0_y;

        }

        inputs[0].releaseTransformedImage(src0);


        return new ImageData(getFilterContext(), dst, dstBounds);
    }
}
